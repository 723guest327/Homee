TCP Server (server.py):


import socket

def server_program():
    host = socket.gethostname()
    port = 5000
    server_socket = socket.socket()
    server_socket.bind((host, port))
    server_socket.listen(2)
    conn, address = server_socket.accept()
    print("Connection from: " + str(address))

    while True:
        data = conn.recv(1024).decode()
        if not data:
            break
        print("from connected user: " + str(data))
        data = input(' -> ')
        conn.send(data.encode())

    conn.close()

if __name__ == '__main__':
    server_program()

TCP Client (client.py):

import socket

def client_program():
    host = socket.gethostname()
    port = 5000
    client_socket = socket.socket()
    client_socket.connect((host, port))

    message = input(" -> ")

    while message.lower().strip() != 'bye':
        client_socket.send(message.encode())
        data = client_socket.recv(1024).decode()
        print('Received from server: ' + data)
        message = input(" -> ")

    client_socket.close()

if __name__ == '__main__':
    client_program()


UDP Server (server.py):

import socket

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
udp_host = socket.gethostname()
udp_port = 5000
print("UDP target IP:", udp_host)
print("UDP target Port:", udp_port)
sock.bind((udp_host, udp_port))

while True:
    data, addr = sock.recvfrom(1024)
    print("Received Messages:", data, " from", addr)
    if not data:
        break
    data = input(" -> ")
    sock.sendto(data.encode(), addr)

sock.close()

UDP Client (client.py):

import socket

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
udp_host = socket.gethostname()
udp_port = 5000
print("UDP target IP:", udp_host)
print("UDP target Port:", udp_port)

message = input(" -> ")

while message.lower().strip() != 'bye':
    sock.sendto(message.encode(), (udp_host, udp_port))
    data, addr = sock.recvfrom(1024)
    print("Received Messages:", data, " from", addr)
    message = input(" -> ")

sock.close()




